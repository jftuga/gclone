#!/bin/zsh
# gclone, -John Taylor, 2025-03-07
set -euo pipefail

# This script facilitates cloning GitHub repositories from your own GitHub account while handling common conflicts.
# It verifies you're in the proper 'github' directory structure, clones repositories using your current directory name
# as the GitHub username, and intelligently manages existing directories by offering to remove them or rename them with
# timestamps. The script provides interactive prompts for all potentially destructive actions and includes helpful
# usage information when invoked incorrectly.

# The parent directory name that must contain all GitHub user directories
# This script expects to be run from a directory structure like: /<path>/<GITHUB_CONTAINER_PATH>/<github-username>/
# Example: If set to "github", you should be in a path like /home/user/github/john_doe/ when running this script
GITHUB_CONTAINER_PATH="github"

# gclone version and url
GCLONE_VERSION="1.0.0"
GCLONE_URL="https://github.com/jftuga/gclone"

# ========================================================================================================================

# Checks if a GitHub repository exists
#
# This function verifies if a given repository exists on GitHub by making
# an HTTP request to the GitHub API or using git's ls-remote command.
#
# Args:
#   $1: The GitHub username/organization that owns the repository
#   $2: The name of the repository to check
#
# Returns:
#   0 if the repository exists
#   1 if the repository doesn't exist
function check_repo_exists() {
    local owner=$1
    local repo=$2
    
    # Method 1: Using curl and GitHub API
    local status_code=$(curl -s -o /dev/null -w "%{http_code}" "https://api.github.com/repos/${owner}/${repo}")
    if [[ "${status_code}" == "200" ]]; then
        return 0  # Repository exists
    fi
    
    # Method 2: Alternative using git ls-remote (as fallback if API fails)
    if git ls-remote "https://github.com/${owner}/${repo}" &> /dev/null; then
        return 0  # Repository exists
    fi
    
    return 1  # Repository doesn't exist
}

# Renames a directory by appending its modification timestamp
# 
# This function appends the directory's modification time to its name
# in the format "directory_name--YYYYMMDD.HHMMSS". It prompts for user 
# confirmation before performing the rename operation.
#
# Args:
#   $1: The directory name/path to be renamed
#
# Returns:
#   0 if the directory was successfully renamed
#   1 if the user declined to rename the directory
#
# Example:
#   rename_directory "Documents"  # Might rename to "Documents--20250307.143010"
function rename_directory() {
    local dname=$1
    local modtime
    if [[ "$(uname)" == "Darwin" ]]; then
        # macOS
        modtime=$(stat -f "%Sm" -t "%Y%m%d.%H%M%S" "${dname}")
    else
        # Linux
        modtime=$(stat -c "%Y" "${dname}" | xargs -I{} date -d @{} "+%Y%m%d.%H%M%S")
    fi
    
    local new_name="${dname}--${modtime}"
    
    echo -n "Rename to ${new_name}? (y/N) "
    read choice
    if [[ "${choice}" == "y" ]]; then
        mv "${dname}" "${new_name}"
        echo "Renamed to: ${new_name}"
        return 0
    else
        echo "Skipped renaming."
        return 1
    fi
}

# Determines whether to use 'trash' or 'rm -rf' for file deletion
#
# This function checks if the 'trash' command is available on the system.
# If available, it returns "trash" which moves files to the trash instead
# of permanently deleting them. Otherwise, it returns "rm -rf" for permanent deletion.
# 
# The function temporarily disables the exit-on-error behavior to check for 
# command availability without interrupting script execution.
#
# Args:
#   None
#
# Returns:
#   "trash" if the trash command is available
#   "rm -rf" if the trash command is not available
#
# Example:
#   delete_cmd=$(check_trash_command)
#   $delete_cmd unwanted_directory
function check_trash_command() {
    # Temporarily disable exit on error for this check
    set +e
    command -v trash &> /dev/null
    local has_trash=$?
    # Re-enable exit on error
    set -e
    
    if [[ $has_trash -eq 0 ]]; then
        echo "trash"
    else
        echo "rm -rf"
    fi
}

# Handles existing directories by prompting for removal or renaming
#
# This function checks if a specified directory exists and if so, offers options
# to handle it. It first offers to remove the directory (using the trash command
# if available, or rm -rf otherwise). If the user declines removal, it then offers
# to rename the directory by appending a timestamp.
#
# Args:
#   $1: The directory name/path to check and potentially remove
#
# Returns:
#   0 if: 
#     - the directory doesn't exist
#     - the directory was successfully removed
#     - the directory was successfully renamed
#   1 if the user declined both removal and renaming
#
# Example:
#   remove_directory_if_exists "build"  # Will handle existing build directory
function remove_directory_if_exists() {
    local dname=$1
    if [[ -d "${dname}" ]]; then
        echo
        echo "Folder already exists: ${dname}"
        echo
        
        # Check which removal command to use
        local remove_cmd=$(check_trash_command)
        
        if [[ "${remove_cmd}" == "trash" ]]; then
            echo -n "Move to trash? (y/N) "
        else
            echo -n "Permanently delete? (y/N) "
        fi
        
        read choice
        if [[ "${choice}" == "y" ]]; then
            if [[ "${remove_cmd}" == "trash" ]]; then
                trash "${dname}"
                echo "Moved to trash: ${dname}"
            else
                rm -rf "${dname}"
                echo "Permanently deleted: ${dname}"
            fi
            return 0
        else
            echo "Skipped removal."
            rename_directory "${dname}"
            return $?  # Returns 0 if renamed, 1 if skipped
        fi
    fi
    return 0  # Directory doesn't exist
}

function usage() {
    local gh_name=$1
    echo
    echo "Usage: $0 [repo-name]"
    echo "This will then clone: https://github.com/${gh_name}/repo-name"
}

# Main program execution begins here

if [[ "$#" -eq "1" && "$1" == "-v" ]] ; then
    echo "gclone v${GCLONE_VERSION}"
    echo "${GCLONE_URL}"
    exit 0
fi

CURR=$(echo "${PWD##*/}")
PARENT=$(echo "${PWD%/*}" | awk -F/ '{print $NF}')

if [[ "${PARENT}" != "${GITHUB_CONTAINER_PATH}" ]] ; then
    usage "someones-github-username"
    echo
    echo "Your parent directory should be: ${GITHUB_CONTAINER_PATH}"
    echo
    exit 1
fi

if [[ "$#" -ne "1" ]] ; then
    usage "${CURR}"
    exit 0
fi

REPO="$1"
URL="https://github.com/${CURR}/${REPO}"

# Before attempting to clone
if ! check_repo_exists "${CURR}" "${REPO}"; then
    echo "Error: Repository ${URL} does not exist or is not accessible."
    echo "Please check:"
    echo "  - The repository name is correct"
    echo "  - You have permission to access this repository"
    echo "  - Your internet connection is working"
    exit 1
fi

# Temporarily disable 'set -e' to allow checking return codes
set +e
remove_directory_if_exists "${REPO}"
EXIT_CODE=$?
set -e

# After remove_directory_if_exists
if [[ ${EXIT_CODE} -eq 0 ]]; then
    # Directory doesn't exist, proceed with cloning
    echo
    git clone "${URL}"
fi
